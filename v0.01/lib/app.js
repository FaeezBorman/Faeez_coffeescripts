// Generated by CoffeeScript 1.6.1
(function() {
  var aroon, diff_h_l, i, ihigh, ilow, kumo_max, kumo_min, l, macd, rsi, sar, tenkan_max, tenkan_min, tk_diff, trend;

  ({
    constructor: function(tn, p, v, tf, tp, sl, tpv, slv) {
      this.tn = tn;
      this.p = p;
      this.v = v;
      this.tf = tf;
      this.tp = tp;
      this.sl = sl;
      this.tpv = tpv;
      this.slv = slv;
    },
    current: function() {
      var c;
      c = {
        tn: this.tn,
        p: this.p,
        v: this.v,
        tf: this.tf,
        tp: this.tp,
        sl: this.sl,
        tpv: this.tpv,
        slv: this.slv
      };
      return c;
    },
    ctpsl: function(up, down) {
      this.up = up;
      this.down = down;
      this.tp = this.p - this.down;
      this.sl = this.p + this.up;
      this.tpv = (this.p * this.v) / this.tp;
      return this.slv = (this.p * this.v) / this.sl;
    },
    csl: function(cp, diff) {
      this.cp = cp;
      this.diff = diff;
      this.sl = this.cp + this.diff;
      return this.slv = (this.p * this.v) / this.sl;
    },
    ctp: function(cp, diff) {
      this.cp = cp;
      this.diff = diff;
      this.tp = this.cp * (100 - this.difF) / 100;
      return this.tpv = (this.p * this.v) / this.tpv;
    },
    log: function() {
      var d;
      return d = "trade number :" + this.tn + " at price " + this.p + " v: " + this.v + " tf: " + this.tf + " tp: " + this.tp + " sl: " + this.sl;
    },
    init: function(context) {
      context.pair = 'btc_usd';
      return context.init = false;
    }
  });

  tk_diff = Math.abs(Functions.diff(c.tenkan, c.kijun));

  tenkan_min = _.min([c.tenkan, c.kijun]);

  tenkan_max = _.max([c.tenkan, c.kijun]);

  kumo_min = _.min([c.senkou_a, c.senkou_b]);

  kumo_max = _.max([c.senkou_a, c.senkou_b]);

  if (context.enable_ha) {
    sar = Functions.sar(context.ha.ins.high, context.ha.ins.low, config.sar_accel, config.sar_max);
  } else {
    sar = Functions.sar(instrument.high, instrument.low, config.sar_accel, config.sar_max);
  }

  if (context.enable_ha) {
    aroon = Functions.aroon(context.ha.ins.high, context.ha.ins.low, config.aroon_period);
  } else {
    aroon = Functions.aroon(instrument.high, instrument.low, config.aroon_period);
  }

  if (context.enable_ha) {
    macd = Functions.macd(context.ha.ins.close, config.macd_fast_period, config.macd_slow_period, config.macd_signal_period);
  } else {
    macd = Functions.macd(instrument.close, config.macd_fast_period, config.macd_slow_period, config.macd_signal_period);
  }

  if (context.enable_ha) {
    rsi = Functions.rsi(context.ha.ins.close, config.rsi_period);
  } else {
    rsi = Functions.rsi(instrument.close, config.rsi_period);
  }

  ihigh = instrument.high[instrument.high.length - 1];

  ilow = instrument.low[instrument.low.length - 1];

  if (ihigh >= H) {
    context.high = ihigh;
  }

  if (ilow <= L) {
    context.low = ilow;
  }

  if ((instrument.price - short) < 0) {
    trend = 'down';
  } else {
    trend = 'up';
  }

  plot({
    cH: context.high,
    cL: context.low,
    h: H,
    l: L
  });

  for (i in context.trade) {
    if (H > context.high) {
      context.trade[i].csl(context.high, 1);
    }
    if (H < context.high && instrument.price < H) {
      context.trade[i].csl(H, 1);
    }
  }

  for (i in context.trade) {
    l = context.trade[i].current();
    if (instrument.price <= l.tp) {
      debug("Sell: " + l.v + " @ " + l.p + " | Buy : " + (instrument.price.toFixed(2)));
      buy(instrument, l.tpv);
      context.trade.splice(i, 1);
    }
    if (instrument.price >= l.sl) {
      debug("!STOP! Sell: " + l.v + " @ " + l.p + " | Buy : " + (instrument.price.toFixed(2)));
      buy(instrument, l.slv);
      context.trade.splice(i, 1);
    }
  }

  diff_h_l = H - L;

  if (instrument.price + 1 >= context.high && ilow >= H && diff_h_l > 20 && context.high >= H) {
    context.tf = 4;
  }

  if (context.tf > 0) {
    context.tradeNo = context.tradeNo + 1;
    context.vol = btc_have * (context.tf / 10);
    context.price = instrument.price;
    context.trade[context.tradeNo] = new sellTrade(context.tradeNo, context.price, context.vol, context.tf);
    context.trade[context.tradeNo].ctpsl(20, 200);
    sell(instrument, context.vol);
  }

}).call(this);
